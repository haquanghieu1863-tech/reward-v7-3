import { useEffect, useRef } from 'react'
export default function Fireworks({duration=1200,onEnd}){ const ref=useRef(); useEffect(()=>{ const c=ref.current,ctx=c.getContext('2d'); let w=c.width=c.offsetWidth,h=c.height=180; const n=12+Math.floor(Math.random()*8),cx=Math.random()*w*.8+w*.1,cy=Math.random()*h*.5+h*.2; const parts=Array.from({length:n},(_,i)=>({x:cx,y:cy,r:2+Math.random()*2,vx:Math.cos(i*(Math.PI*2/n))*(1+Math.random()*1.5),vy:Math.sin(i*(Math.PI*2/n))*(1+Math.random()*1.5),life:1})); let t0=performance.now(),raf; const loop=(t)=>{ const dt=Math.min(40,t-(t0||t))/1000;t0=t; ctx.clearRect(0,0,w,h); parts.forEach(p=>{ p.x+=p.vx*80*dt; p.y+=p.vy*80*dt+30*dt; p.life-=dt*.8; ctx.globalAlpha=Math.max(0,p.life); ctx.fillStyle=`hsl(${Math.random()*50+10}deg 100% 60%)`; ctx.beginPath(); ctx.arc(p.x,p.y,p.r,0,Math.PI*2); ctx.fill() }); if(parts.some(p=>p.life>0)) raf=requestAnimationFrame(loop); else onEnd&&onEnd() }; raf=requestAnimationFrame(loop); return()=>cancelAnimationFrame(raf) },[duration,onEnd]); return <canvas ref={ref} style={{width:'100%',height:180,display:'block'}}/> }